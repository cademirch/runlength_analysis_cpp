
#include "CompressedRunnieWriter.hpp"
#include "CompressedRunnieReader.hpp"
#include "DiscreteWeibull.hpp"


void write_file(path absolute_output_path, path absolute_config_path, vector <pair <double,double> >& centroids){
    CompressedRunnieWriter writer = CompressedRunnieWriter(absolute_output_path, absolute_config_path);

   vector<string> bases = {"A","C","G","T"};
   RunnieSequenceElement sequence;

   sequence.name = "centroids";

   for (size_t i=0; i<centroids.size(); i++){
       sequence.sequence += bases[i%4];
       sequence.scales.push_back(centroids[i].first);
       sequence.shapes.push_back(centroids[i].second);
   }

   cout << "sequence.name: " << sequence.name << '\n';
   writer.write_sequence(sequence);

   sequence.name = "centroids_reverse";

   cout << centroids.size() << '\n';
   for (size_t i=centroids.size(); i>0; i--){
       sequence.sequence += bases[i%4];
       sequence.scales.push_back(centroids[(i-1)].first);
       sequence.shapes.push_back(centroids[(i-1)].second);
   }

   cout << "sequence.name: " << sequence.name << '\n';
   writer.write_sequence(sequence);

   writer.write_indexes();

   //    i = 0;
//    for (auto& params: centroids){
//        cout << params.first << " " << params.second << " " << int(writer.fetch_encoding(params.first, params.second)) << '\n' << std::flush;
//        vector<double> distribution(100);
//        evaluate_discrete_weibull(distribution, params.first, params.second);
//
//        print_distribution(distribution);
//        i++;
//    }

}


int main(){
    path script_path = __FILE__;
    cout << script_path;
    path project_directory = script_path.parent_path().parent_path().parent_path();

    path relative_config_path = "/data/test/runnie/config/compression_parameters_human_5mb_10-9-2019.tsv";     //TODO: move to `/config/`
    path absolute_config_path = project_directory / relative_config_path;

    path relative_output_path = "/output/";
    path filename = "test_CompressedRunnieWriter.rq";
    path absolute_output_path = project_directory / relative_output_path / filename;

    cout << "WRITING: " << absolute_output_path << "\n";

    vector <pair <double,double> > centroids = {
        {0.156069,1.002322}, {0.175813,1.011429}, {0.183684,1.030105}, {0.185382,1.056303}, {0.185996,1.093240}, {0.186825,1.148644}, {0.188556,1.230392}, {0.190575,1.352536}, {0.194290,1.534103}, {0.199117,1.794003}, {0.205292,2.169827}, {0.213860,2.763479}, {0.226342,3.943392},
        {0.406617,1.006949}, {0.412261,1.023396}, {0.418709,1.049256}, {0.424790,1.082861}, {0.430500,1.123991}, {0.435762,1.176022}, {0.439835,1.246539}, {0.442233,1.342999}, {0.443559,1.473933}, {0.442880,1.648744}, {0.441515,1.883996}, {0.438055,2.195935}, {0.433257,2.617896}, {0.428404,3.206205}, {0.427783,4.130736}, {0.441926,5.594763},
        {0.701697,1.030113}, {0.705473,1.090341}, {0.708388,1.161591}, {0.710895,1.243764}, {0.714684,1.340908}, {0.718704,1.449866}, {0.722869,1.570352}, {0.725976,1.704575}, {0.729978,1.858045}, {0.733118,2.034175}, {0.736352,2.239246}, {0.741016,2.489951}, {0.744615,2.799543}, {0.745700,3.224152}, {0.742821,3.938523}, {0.736478,5.473094},
        {1.008546,1.084986}, {1.014840,1.262419}, {1.017223,1.456865}, {1.020162,1.668941}, {1.021928,1.888677}, {1.024662,2.118928}, {1.024886,2.351623}, {1.031623,2.587789}, {1.034683,2.830356}, {1.039261,3.089207}, {1.045287,3.368073}, {1.052300,3.678687}, {1.060373,4.040010}, {1.070865,4.492055}, {1.081446,5.161899}, {1.091832,6.687077},
        {1.319061,1.400417}, {1.323933,2.134492}, {1.326750,2.783862}, {1.330036,3.359733}, {1.333846,3.888434}, {1.338081,4.376310}, {1.344062,4.845407}, {1.353194,5.308764}, {1.362161,5.784299}, {1.372879,6.289559}, {1.384328,6.840379}, {1.395368,7.463553}, {1.406375,8.201146}, {1.417865,9.129177}, {1.430133,10.441779}, {1.447378,12.990012},
        {1.608475,3.172584}, {1.611569,5.513023}, {1.613061,6.910924}, {1.614880,7.966920}, {1.616942,8.846929}, {1.620507,9.620539}, {1.624198,10.324771}, {1.628101,10.976632}, {1.632489,11.596234}, {1.636775,12.207847}, {1.640962,12.812734}, {1.644396,13.433727}, {1.646227,14.090744}, {1.647083,14.819138}, {1.647449,15.709607}, {1.650801,17.216681},
        {1.892620,2.316182}, {1.891104,3.979224}, {1.889311,5.046025}, {1.884752,5.911225}, {1.880728,6.663249}, {1.877444,7.360481}, {1.873181,8.035718}, {1.869059,8.705379}, {1.865599,9.369769}, {1.857415,10.046813}, {1.851050,10.745547}, {1.842183,11.492015}, {1.831273,12.287814}, {1.822658,13.193266}, {1.812229,14.307905}, {1.799614,16.290515},
        {2.232738,2.127466}, {2.235782,3.670382}, {2.233776,4.700574}, {2.234020,5.546209}, {2.240244,6.303382}, {2.243213,6.986508}, {2.247743,7.643562}, {2.252353,8.276609}, {2.255417,8.888612}, {2.262887,9.489482}, {2.268914,10.112843}, {2.276569,10.783181}, {2.287796,11.526744}, {2.302613,12.416147}, {2.315431,13.635058}, {2.338413,16.043465},
        {2.584971,4.155113}, {2.583651,7.303763}, {2.584119,9.157251}, {2.586962,10.479025}, {2.590558,11.535571}, {2.595872,12.449537}, {2.602623,13.258973}, {2.609991,14.012862}, {2.618502,14.731858}, {2.624172,15.432662}, {2.631215,16.123015}, {2.636917,16.852166}, {2.642805,17.618870}, {2.647764,18.487093}, {2.651638,19.588113}, {2.661750,21.477359},
        {2.943816,2.967994}, {2.946288,5.151724}, {2.940767,6.658547}, {2.933625,7.892194}, {2.930539,8.987789}, {2.926328,9.973440}, {2.920488,10.903654}, {2.915011,11.810102}, {2.907110,12.692651}, {2.898021,13.574321}, {2.887504,14.437053}, {2.883120,15.319174}, {2.869919,16.251802}, {2.864193,17.261672}, {2.845652,18.508794}, {2.829778,20.756626},
        {3.348675,2.920759}, {3.354002,4.917161}, {3.351849,6.300420}, {3.351859,7.473654}, {3.355587,8.537940}, {3.359221,9.513872}, {3.362424,10.397370}, {3.363597,11.279309}, {3.368324,12.161489}, {3.370062,13.017024}, {3.381971,13.940713}, {3.383611,14.898973}, {3.393139,15.992582}, {3.404737,17.333513}, {3.423235,19.320290}, {3.476676,23.043219},
        {3.769815,3.545093}, {3.774087,5.929150}, {3.772379,7.585658}, {3.773547,8.970047}, {3.772399,10.232570}, {3.761359,11.335717}, {3.764823,12.313074}, {3.760667,13.214302}, {3.755342,14.082653}, {3.757192,14.907359}, {3.753476,15.719132}, {3.753487,16.611371}, {3.743007,17.652842}, {3.732082,19.071219}, {3.711622,21.363779}, {3.692714,24.941437},
        {4.215877,3.265904}, {4.223074,5.214292}, {4.228803,6.391453}, {4.231375,7.392990}, {4.242666,8.284881}, {4.230177,9.144015}, {4.227665,10.006120}, {4.228118,10.800485}, {4.237324,11.595467}, {4.236419,12.383273}, {4.234751,13.181235}, {4.227351,14.033433}, {4.216973,14.957953}, {4.224456,16.073455}, {4.223751,17.877546}, {4.286169,21.718607},
        {4.752013,3.434826}, {4.744909,5.358916}, {4.743074,6.515601}, {4.735188,7.439765}, {4.745621,8.280070}, {4.751057,9.082443}, {4.747326,9.825828}, {4.744780,10.533964}, {4.732940,11.260913}, {4.743433,12.022099}, {4.712167,12.817624}, {4.705271,13.723159}, {4.687277,14.941664}, {4.715513,16.975417}, {4.698006,19.847008}, {4.665874,22.974165},
        {5.380785,2.677318}, {5.363171,4.649511}, {5.348498,5.678933}, {5.359036,6.444782}, {5.374006,7.142155}, {5.371854,7.787233}, {5.367022,8.382914}, {5.345663,8.903972}, {5.357938,9.454592}, {5.353673,10.023295}, {5.328844,10.646662}, {5.310732,11.355436}, {5.310820,12.238263}, {5.315211,13.519683}, {5.352301,15.684868}, {5.302199,18.792307},
        {6.631657,1.225412}, {6.769243,2.101613}, {6.753055,3.014492}, {6.682895,3.792377}, {6.551478,4.469776}, {6.480785,5.066805}, {6.374827,5.556591}, {6.548307,6.115139}, {6.365558,6.697764}, {6.329936,7.368201}, {6.305574,7.931390}, {6.218989,8.629417}, {6.259816,9.426295}, {6.349632,10.523216}, {6.258312,12.223754}, {6.124640,15.270804}
    };

    write_file(absolute_output_path, absolute_config_path, centroids);

    CompressedRunnieReader reader = CompressedRunnieReader("/home/ryan/code/runlength_analysis_cpp/data/test/runnie/rq/test_sequences.rq");

//    cout << "reader.channel_metadata_start_position: " << reader.channel_metadata_start_position << '\n';
//    cout << "reader.indexes_start_position: " << reader.indexes_start_position << '\n';

    CompressedRunnieSequence compressed_sequence;
    reader.get_sequence(compressed_sequence, 0);

    cout << compressed_sequence.sequence << '\n';
    compressed_sequence.print_encoding();

    reader.get_sequence(compressed_sequence, 1);

    cout << compressed_sequence.sequence << '\n';
    compressed_sequence.print_encoding();

    cout << "TESTING NAMED COMPRESSED RUNNIE SEQUENCE:\n";
    NamedCompressedRunnieSequence named_compressed_sequence;
    reader.get_sequence(named_compressed_sequence, 0);

    cout << named_compressed_sequence.name << '\n';
    cout << named_compressed_sequence.sequence << '\n';
    named_compressed_sequence.print_encoding();

    return 0;
}
